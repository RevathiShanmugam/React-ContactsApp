How user input affects the ListContacts component's own state:

The user enters text into the input field.
An event listener invokes the updateQuery() function on every onChange event.
updateQuery() then calls setState(), merging in the new state to update the component's internal state.
Because its state has changed, the ListContacts component re-renders.

For updated state to filter our contacts we'll need the following packages:
npm install --save escape-string-regexp sort-by

log: 4e52e50
At this point, our component is a bit unwieldy; the render() method accesses query from the state object (this.state.query) and contacts from the props object (this.props.contacts) quite often. Because props and state are just JavaScript objects, we can use an ES6 feature to unpack them into distinct variables rather than referencing them as this.state.query and this.props.contacts every time. This process of unpacking is called object destructuring.

All in all, destructuring our objects shouldn't change the return value of our code, but it can make things look a bit cleaner. 